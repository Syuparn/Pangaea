{
  # A converts self into arr.
  A: m{@{\}},
  # append appends the elements at the end of self.
  append: m{|i| .chain([i])},
  # acc returns each state of reducing process.
  acc: m{|f, init: nil|
    ._iter.{|it| <{|acc| yield f(acc, it.next) => res; recur(res)}>.new(init)}
  },
  # all? returns whether all elements meet the predicate f
  all?: m{|f| @^f@B.has?(false).!},
  # any? returns whether any element meets the predicate f
  any?: m{|f| @^f@B.has?(true)},
  # chain concatenates all iters in arguments.
  chain: m{
    is := \0@_iter._iter
    <{|i|
      yield i.try.next.catch(StopIterErr) {recur(is.next => i); i.next}.abandon
    }>.new(is.next)
  },
  # doUntil returns elements while (element_yielded_last).^cond? is false.
  doUntil: m{|cond?|
    ._iter.{|it| <{|ok| yield (n := it.next) if !ok; recur(n.^cond?)}>.new(false)}
  },
  # doWhile returns elements while (element_yielded_last).^cond? is true.
  doWhile: m{|cond?|
    ._iter.{|it| <{|ok| yield (n := it.next) if ok; recur(n.^cond?)}>.new(true)}
  },
  # empty? returns whether self contains elements.
  empty?: m{.A.empty?},
  # exclude selects elements for which f returns false.
  exclude: m{|f| @{\ if .proto == Arr else [\]}@{\.unwrap if !f(*\)}},
  # flipflop selects elements from start to end.
  flipflop: m{|start, end|
    ._iter$({res: [], started: false}){|acc, i|
      .started.case(%{
        true: {res: .res+[i], started: i !== end},
        false: {res: .res+[i], started: true} if i === start else acc,
      })
    }.res
  },
  # find returns the first element which cond? is true. (returns nil if not found)
  find: m{|cond?| ._iter.doUntil(cond?).last.{\ if &.^cond?}},
  # lazyMap works similar to map but returns iter of elements instead.
  lazyMap: m{|f| ._iter.{|it| <{yield it.next.^f}>}},
  # last returns the last element in self without conversion to array.
  last: m{${|_, i| i}},
  # map is a wrapper of listchain.
  map: m{|f| @^f},
  # max returns the maximum element in self
  max: m{.A.{\[1:]$(\[0]){|max, i| i if i > max else max}}},
  # min returns the minimum element in self
  min: m{.A.{\[1:]$(\[0]){|min, i| i if i < min else min}}},
  # prepend prepends the elements at first of self.
  prepend: m{|i| [i].chain(self)},
  # reduce is a wrapper of reducechain.
  reduce: m{|f, init: nil| $(init)^f},
  # select selects elements for which f returns true.
  select: m{|f| @{\ if .proto == Arr else [\]}@{\.unwrap if f(*\)}},
  # sum returns sum of elements in self.
  sum: m{$(nil)+},
  # tally counts how many times element appears in self.
  # HACK: exclude Map's props by Map[i] != acc[i]
  tally: m{$(%{}){|acc, i| %{i: acc[i]+1 if Map[i] != acc[i] else 1, **acc}}},
  # until returns elements while (element).^cond? is false.
  until: m{|cond?| ._iter.{|it| <{yield n if (n := it.next).^cond?.!}>}},
  # while returns elements while (element).^cond? is true.
  while: m{|cond?| ._iter.{|it| <{yield n if (n := it.next).^cond?}>}},
  # withI returns new iter of self with index.
  withI: m{._iter.{|it| <{|i| yield [i, it.next]; recur(i + 1)}>.new(0)}},
  # zip returns iter that yields array of ith element in each iter.
  zip: m{\0@_iter.{|iters| <{yield iters@next}>}},
}
