{
  # === returns whether predicate other is true as for the topic self.
  '===: m{|other| self == other || .kindOf?(other) || other.asFor?(self)},
  # !== returns whether predicate other is false as for the topic self.
  '!==: m{|other| !(self === other)},
  # ancestors returns all ancestors along the proto chain of self.
  ancestors: m{<{yield .proto if \ != BaseObj; recur(.proto)}>.new(self).A},
  # asFor? returns whether predicate self is true as for o.
  asFor?: m{|o| o.kindOf?(self)},
  # bro generates brother object (== child of proto).
  bro: m{|o| .proto.bear(o)},
  # case returns value of firstly matched key (or nil if not matched any).
  case: m{|map| map.find {|k, v| self === k}.{|k, v| v}},
  # del deletes specified keys in self.
  del: m{\0[1:].{|keys| self@({}){|k, v| [k, v] if keys.has?(k).!}}},
  # digest merges arr pairs with self.
  digest: m{|pairs| {**self, **pairs.O}},
  # kindOf? returns whether other appears in self's proto chain.
  kindOf?: m{|other| self == other || .ancestors.has?(other)},
  # max returns the maximum value in self.
  max: m{.values.max},
  # min returns the minimum value in self.
  min: m{.values.min},
  # nil? returns whether self is nil.
  nil?: m{self == nil},
  # patch replaces specified values in self.
  patch: m{.bro({**\_, **self})},
  # print prints to the stdout without breakline.
  print: m{.p(end: "")},
  # puts is an alias of p.
  puts: m{.p},
  # tap calls f but returns self.
  tap: m{|f| .^f; self},
}
