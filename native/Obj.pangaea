{
  # === returns whether predicate other is true as for the topic self.
  '===: m{|other| self == other || .kindOf?(other) || other.asFor?(self)},
  # !== returns whether predicate other is false as for the topic self.
  '!==: m{|other| !(self === other)},
  # ancestors returns all ancestors along the proto chain of self.
  ancestors: m{<{yield .proto if \ != BaseObj; recur(.proto)}>.new(self).A},
  # asFor? returns whether predicate self is true as for o.
  asFor?: m{|o| o.kindOf?(self)},
  # kindOf? returns whether other appears in self's proto chain.
  kindOf?: m{|other| self == other || .ancestors.has?(other)},
  # max returns the maximum value in self
  max: m{.values.max},
  # min returns the minimum value in self
  min: m{.values.min},
  # nil? returns whether self is nil.
  nil?: m{self == nil},
  # puts is an alias of p.
  puts: m{.p},
  # tap calls f but returns self
  tap: m{|f| .^f; self},
}
