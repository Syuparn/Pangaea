{
  # asFor? returns whether predicate self is true as for o.
  asFor?: m{|o| .find {\ == o}.nil?.!},
  # at returns elements of given indices.
  at: m{|i| v if (v := Obj['at](self, i)).nil?.! else ._iter.at(i)},
  # counter? returns whether all of start, stop, and step are int.
  counter?: m{[.start, .stop, .step].all? {(.proto == Int) || .nil?}},
  # dec? returns whether self is a decresing range.
  dec?: m{0 > 1~.{self.step}},
  # inc? returns whether self is an incresing range.
  inc?: m{0 < 1~.{self.step}},
}
