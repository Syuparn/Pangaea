{
  # A converts self into arr.
  # NOTE: arr descendant is converted into Arr's child
  A: m{self[:]},
  # assign replaces self[i] with v.
  assign: m{|i, v| .proto.new([*self[:i], v, *self[i+1:]] if i.between?(-.len, .len-1) else self)},
  # asFor? returns whether predicate self is true as for o.
  asFor?: m{|o| .has?(o)},
  # digest merges arr pairs with self
  digest: m{|pairs| [*self, *pairs]},
  # empty? returns whether self contains elements.
  empty?: m{.len.!},
  # grep filters elements by === match.
  grep: m{|o| @{\ if \ === o}},
  # rev returns arr with reversed elements.
  rev: m{self[::-1]},
  # unwrap extracts element if there is only one element.
  unwrap: m{self[0] if .len == 1 else self},
}
